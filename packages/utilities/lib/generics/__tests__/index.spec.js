const _ = require('..');

describe('Unit test cases for Services/utility/objects.js', function() {
  describe('Unit test cases for simpleApiStoreStates', function() {
    let defaultState = {};
    let properties1 = {};
    beforeEach(function() {
      defaultState = {
        testProp: {
          loading: false,
          data: null,
          error: null,
        },
      };
      properties1 = {
        loading: true,
      };
    });
    it('should return a valid loading state', function() {
      expect(defaultState.testProp.loading).toBe(false);
      const result = (0, _.simpleApiStoreStates)(
        defaultState,
        'testProp',
        properties1,
      );
      const expected = {
        testProp: {
          loading: true,
        },
      };
      expect(result.testProp).toBeDefined();
      expect(result.testProp.loading).toBe(expected.testProp.loading);
    });
    it('should handle wrong props', function() {
      expect(defaultState.testProp).toBeDefined();
      const result = (0, _.simpleApiStoreStates)(
        defaultState,
        'someProps',
        properties1,
      );
      const expected = {
        testProp: {
          loading: false,
        },
      };
      expect(result.testProp).toBeDefined();
      expect(result.testProp.loading).toBe(expected.testProp.loading);
    });
  });
});
// # sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmljcy9fX3Rlc3RzX18vaW5kZXguc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImRlZmF1bHRTdGF0ZSIsInByb3BlcnRpZXMxIiwiYmVmb3JlRWFjaCIsInRlc3RQcm9wIiwibG9hZGluZyIsImRhdGEiLCJlcnJvciIsIml0IiwiZXhwZWN0IiwidG9CZSIsInJlc3VsdCIsImV4cGVjdGVkIiwidG9CZURlZmluZWQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyxpREFBRCxFQUFvRCxZQUFNO0FBQ2hFQSxFQUFBQSxRQUFRLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUN6RCxRQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFDQSxRQUFJQyxXQUFXLEdBQUcsRUFBbEI7QUFDQUMsSUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZkYsTUFBQUEsWUFBWSxHQUFHO0FBQ2JHLFFBQUFBLFFBQVEsRUFBRTtBQUNSQyxVQUFBQSxPQUFPLEVBQUUsS0FERDtBQUVSQyxVQUFBQSxJQUFJLEVBQUUsSUFGRTtBQUdSQyxVQUFBQSxLQUFLLEVBQUU7QUFIQztBQURHLE9BQWY7QUFPQUwsTUFBQUEsV0FBVyxHQUFHO0FBQ1pHLFFBQUFBLE9BQU8sRUFBRTtBQURHLE9BQWQ7QUFHRCxLQVhTLENBQVY7QUFZQUcsSUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDLFlBQU07QUFDOUNDLE1BQUFBLE1BQU0sQ0FBQ1IsWUFBWSxDQUFDRyxRQUFiLENBQXNCQyxPQUF2QixDQUFOLENBQXNDSyxJQUF0QyxDQUEyQyxLQUEzQztBQUNBLFVBQU1DLE1BQU0sR0FBRyw0QkFDYlYsWUFEYSxFQUViLFVBRmEsRUFHYkMsV0FIYSxDQUFmO0FBS0EsVUFBTVUsUUFBUSxHQUFHO0FBQ2ZSLFFBQUFBLFFBQVEsRUFBRTtBQUNSQyxVQUFBQSxPQUFPLEVBQUU7QUFERDtBQURLLE9BQWpCO0FBS0FJLE1BQUFBLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDUCxRQUFSLENBQU4sQ0FBd0JTLFdBQXhCO0FBQ0FKLE1BQUFBLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDUCxRQUFQLENBQWdCQyxPQUFqQixDQUFOLENBQWdDSyxJQUFoQyxDQUFxQ0UsUUFBUSxDQUFDUixRQUFULENBQWtCQyxPQUF2RDtBQUNELEtBZEMsQ0FBRjtBQWVBRyxJQUFBQSxFQUFFLENBQUMsMkJBQUQsRUFBOEIsWUFBTTtBQUNwQ0MsTUFBQUEsTUFBTSxDQUFDUixZQUFZLENBQUNHLFFBQWQsQ0FBTixDQUE4QlMsV0FBOUI7QUFDQSxVQUFNRixNQUFNLEdBQUcsNEJBQ2JWLFlBRGEsRUFFYixXQUZhLEVBR2JDLFdBSGEsQ0FBZjtBQUtBLFVBQU1VLFFBQVEsR0FBRztBQUNmUixRQUFBQSxRQUFRLEVBQUU7QUFDUkMsVUFBQUEsT0FBTyxFQUFFO0FBREQ7QUFESyxPQUFqQjtBQUtBSSxNQUFBQSxNQUFNLENBQUNFLE1BQU0sQ0FBQ1AsUUFBUixDQUFOLENBQXdCUyxXQUF4QjtBQUNBSixNQUFBQSxNQUFNLENBQUNFLE1BQU0sQ0FBQ1AsUUFBUCxDQUFnQkMsT0FBakIsQ0FBTixDQUFnQ0ssSUFBaEMsQ0FBcUNFLFFBQVEsQ0FBQ1IsUUFBVCxDQUFrQkMsT0FBdkQ7QUFDRCxLQWRDLENBQUY7QUFlRCxHQTdDTyxDQUFSO0FBOENELENBL0NPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaW1wbGVBcGlTdG9yZVN0YXRlcyB9IGZyb20gJy4uJztcblxuZGVzY3JpYmUoJ1VuaXQgdGVzdCBjYXNlcyBmb3IgU2VydmljZXMvdXRpbGl0eS9vYmplY3RzLmpzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnVW5pdCB0ZXN0IGNhc2VzIGZvciBzaW1wbGVBcGlTdG9yZVN0YXRlcycsICgpID0+IHtcbiAgICBsZXQgZGVmYXVsdFN0YXRlID0ge307XG4gICAgbGV0IHByb3BlcnRpZXMxID0ge307XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBkZWZhdWx0U3RhdGUgPSB7XG4gICAgICAgIHRlc3RQcm9wOiB7XG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBwcm9wZXJ0aWVzMSA9IHtcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSB2YWxpZCBsb2FkaW5nIHN0YXRlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGRlZmF1bHRTdGF0ZS50ZXN0UHJvcC5sb2FkaW5nKS50b0JlKGZhbHNlKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNpbXBsZUFwaVN0b3JlU3RhdGVzKFxuICAgICAgICBkZWZhdWx0U3RhdGUsXG4gICAgICAgICd0ZXN0UHJvcCcsXG4gICAgICAgIHByb3BlcnRpZXMxLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0ge1xuICAgICAgICB0ZXN0UHJvcDoge1xuICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXN0UHJvcCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGVzdFByb3AubG9hZGluZykudG9CZShleHBlY3RlZC50ZXN0UHJvcC5sb2FkaW5nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB3cm9uZyBwcm9wcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChkZWZhdWx0U3RhdGUudGVzdFByb3ApLnRvQmVEZWZpbmVkKCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBzaW1wbGVBcGlTdG9yZVN0YXRlcyhcbiAgICAgICAgZGVmYXVsdFN0YXRlLFxuICAgICAgICAnc29tZVByb3BzJyxcbiAgICAgICAgcHJvcGVydGllczEsXG4gICAgICApO1xuICAgICAgY29uc3QgZXhwZWN0ZWQgPSB7XG4gICAgICAgIHRlc3RQcm9wOiB7XG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXN0UHJvcCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGVzdFByb3AubG9hZGluZykudG9CZShleHBlY3RlZC50ZXN0UHJvcC5sb2FkaW5nKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
